---
# acick config file
#
# For details, see
# https://docs.rs/acick/{version}/acick/config/index.html

# Version of acick that generated this config file.
version: {version}
# Shell used to compile the source code or to run the binary. [c]
shell: [{bash}, "-e", "-c", "{{{{ command }}}}"]
# Path at which the problems fetched from service are saved. [t, s]
problem_path: "{{{{ service }}}}/{{{{ contest }}}}/{{{{ problem | lower }}}}/problem.yaml"
# Directory in which the testcase files downloaded from AtCoder are saved. [t, s]
testcases_dir: "{{{{ service }}}}/{{{{ contest }}}}/{{{{ problem | lower }}}}/testcases"

# Session that communicates with service.
session:
  timeout: 30s
  retry_limit: 4
  retry_interval: 2s

# Configs for each service
services:
  # Config for AtCoder (https://atcoder.jp)
  atcoder:
    # Name of language as which your source code is submitted to the service.
    # See https://atcoder.jp/contests/practice/rules for full list of available language names.
    lang_name: C++14 (GCC 5.4.1)
    # Directory where compile and run commands are executed. [t, s]
    working_dir: "{{{{ service }}}}/{{{{ contest }}}}/{{{{ problem | lower }}}}"
    # Path of your source code. [t, s]
    source_path: "{{{{ service }}}}/{{{{ contest }}}}/{{{{ problem | lower }}}}/Main.cpp"
    # Shell script to compile your source code. [t]
    compile: set -x && g++ -std=gnu++1y -O2 -o ./a.out ./Main.cpp
    # Shell script to run the binary built with the compile script. [t]
    run: ./a.out
    # Template for source code. [p]
    template: |
      /*
      [{{{{ contest.id }}}}] {{{{ problem.id }}}} - {{{{ problem.name }}}}
      */

      #include <iostream>
      using namespace std;

      int main() {{
          return 0;
      }}
