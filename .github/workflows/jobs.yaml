name: jobs

on:
  schedule:
    - cron: "43 21 * * *"
  push:
    branches:
      - "**"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+**"
  pull_request:

env:
  RUST_BACKTRACE: full
  ACICK_ATCODER_USERNAME: ${{ secrets.ACICK_ATCODER_USERNAME }}
  ACICK_ATCODER_PASSWORD: ${{ secrets.ACICK_ATCODER_PASSWORD }}
  ACICK_DBX_APP_KEY: ${{ secrets.ACICK_DBX_APP_KEY }}
  ACICK_DBX_APP_SECRET: ${{ secrets.ACICK_DBX_APP_SECRET }}
  ACICK_DBX_ACCESS_TOKEN: ${{ secrets.ACICK_DBX_ACCESS_TOKEN }}

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          default: true

      - name: "`cargo fmt -- --check`"
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: '0.12.3'
          args: '--verbose --forward --ignore-tests --workspace --all-features'

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1.0.2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive code coverage results
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage-report
          path: cobertura.xml

  doc:
    strategy:
      fail-fast: true
      matrix:
        target_triple:
          - x86_64-pc-windows-msvc
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
        include:
          - target_triple: x86_64-pc-windows-msvc
            host_triple: x86_64-pc-windows-msvc
            os: windows-latest
          - target_triple: x86_64-pc-windows-gnu
            host_triple: x86_64-pc-windows-gnu
            os: windows-latest
          - target_triple: x86_64-apple-darwin
            host_triple: x86_64-apple-darwin
            os: macos-latest
          - target_triple: x86_64-unknown-linux-gnu
            host_triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04
          - target_triple: x86_64-unknown-linux-musl
            host_triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04

    name: Doc (${{ matrix.target_triple }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: "`apt-get install`"
        run: sudo apt-get install musl-tools
        if: matrix.target_triple == 'x86_64-unknown-linux-musl'

      - name: Install toolchain and target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-${{ matrix.host_triple }}
          target: ${{ matrix.target_triple }}
          default: true

      - name: "`cargo doc`"
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --workspace --all-features --target ${{ matrix.target_triple }}

  build:
    strategy:
      fail-fast: false
      matrix:
        name:
          - stable-x86_64-pc-windows-msvc
          - stable-x86_64-pc-windows-gnu
          - stable-x86_64-apple-darwin
          - stable-x86_64-unknown-linux-gnu
          - stable-x86_64-unknown-linux-musl
          - beta-x86_64-unknown-linux-gnu
        include:
          - name: stable-x86_64-pc-windows-msvc
            channel: stable
            target_triple: x86_64-pc-windows-msvc
            host_triple: x86_64-pc-windows-msvc
            os: windows-latest
          - name: stable-x86_64-pc-windows-gnu
            channel: stable
            target_triple: x86_64-pc-windows-gnu
            host_triple: x86_64-pc-windows-gnu
            os: windows-latest
          - name: stable-x86_64-apple-darwin
            channel: stable
            target_triple: x86_64-apple-darwin
            host_triple: x86_64-apple-darwin
            os: macos-latest
          - name: stable-x86_64-unknown-linux-gnu
            channel: stable
            target_triple: x86_64-unknown-linux-gnu
            host_triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04
          - name: stable-x86_64-unknown-linux-musl
            channel: stable
            target_triple: x86_64-unknown-linux-musl
            host_triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04
          - name: beta-x86_64-unknown-linux-gnu
            channel: beta
            target_triple: x86_64-unknown-linux-gnu
            host_triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04

    name: Build (${{ matrix.name }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: "`apt-get install`"
        run: sudo apt-get install musl-tools
        if: matrix.target_triple == 'x86_64-unknown-linux-musl'

      - name: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.channel }}-${{ matrix.host_triple }}
          target: ${{ matrix.target_triple }}
          default: true

      - name: Determine `cargo test` targets
        id: cargo_test_targets
        run: |
          if ${{ !!secrets }}; then
            echo '::set-output name=targets::--workspace --all-targets'
          else
            echo '::set-output name=targets::--workspace --lib --test batch'
          fi
        shell: bash

      - name: "`cargo test`"
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast --all-features ${{ steps.cargo_test_targets.outputs.targets }} --target ${{ matrix.target_triple }}

      - name: "`rustup component add clippy`"
        run: rustup component add clippy

      - name: "`cargo clippy`"
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace --all-targets --all-features --target ${{ matrix.target_triple }} -- -D warnings

  release:
    strategy:
      fail-fast: true
      matrix:
        target_triple:
          - x86_64-pc-windows-msvc
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
        include:
          - target_triple: x86_64-pc-windows-msvc
            host_triple: x86_64-pc-windows-msvc
            os: windows-latest
          - target_triple: x86_64-pc-windows-gnu
            host_triple: x86_64-pc-windows-gnu
            os: windows-latest
          - target_triple: x86_64-apple-darwin
            host_triple: x86_64-apple-darwin
            os: macos-latest
          - target_triple: x86_64-unknown-linux-gnu
            host_triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04
          - target_triple: x86_64-unknown-linux-musl
            host_triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04

    name: GitHub Release (${{ matrix.target_triple }})
    runs-on: ${{ matrix.os }}
    needs: [rustfmt, doc, build]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: "`apt-get install`"
        run: sudo apt-get install musl-tools
        if: matrix.target_triple == 'x86_64-unknown-linux-musl'

      - name: Install toolchain and target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-${{ matrix.host_triple }}
          target: ${{ matrix.target_triple }}
          default: true

      - name: "`cargo build --release`"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features --target ${{ matrix.target_triple }}

      - name: Create an asset
        id: asset
        run: |
          if ${{ contains(matrix.target_triple, 'pc-windows') }}; then
            EXE=.exe
          fi
          BIN_TARGET=acick
          EXECUTABLE="./target/${{ matrix.target_triple }}/release/$BIN_TARGET$EXE"
          ASSET_STEM="$BIN_TARGET-${GITHUB_REF#refs/tags/}-${{ matrix.target_triple }}"
          git archive -o "./$ASSET_STEM.tar" --prefix "$ASSET_STEM/" HEAD
          tar -xf "./$ASSET_STEM.tar"
          mv "$EXECUTABLE" ./Cargo.lock "./$ASSET_STEM/"
          if ${{ contains(matrix.target_triple, 'pc-windows') }}; then
            ASSET="./$ASSET_STEM.zip"
            7z a "$ASSET" "./$ASSET_STEM"
            zipinfo "$ASSET"
          else
            ASSET="./$ASSET_STEM.tar.gz"
            tar -czvf "$ASSET" "./$ASSET_STEM"
          fi
          echo "::set-output name=asset::$ASSET"
        shell: bash

      - name: GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.asset.outputs.asset }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish cargo package
    runs-on: ubuntu-18.04
    needs: [rustfmt, doc, build, release]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install toolchain and target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          default: true

      - name: "`cargo publish` (acick-util)"
        run: "cargo publish --all-features --verbose --token ${{ secrets.CRATES_IO_TOKEN }} && sleep 60 || :"
        working-directory: "./acick-util"
      - name: "`cargo publish` (acick-dropbox)"
        run: "cargo publish --all-features --verbose --token ${{ secrets.CRATES_IO_TOKEN }} && sleep 60 || :"
        working-directory: "./acick-dropbox"
      - name: "`cargo publish` (acick-config)"
        run: "cargo publish --all-features --verbose --token ${{ secrets.CRATES_IO_TOKEN }} && sleep 60 || :"
        working-directory: "./acick-config"
      - name: "`cargo publish` (acick-atcoder)"
        run: "cargo publish --all-features --verbose --token ${{ secrets.CRATES_IO_TOKEN }} && sleep 60 || :"
        working-directory: "./acick-atcoder"

      - name: "`cargo publish` (acick)"
        run: cargo publish --all-features --verbose --token ${{ secrets.CRATES_IO_TOKEN }}
        working-directory: "."
